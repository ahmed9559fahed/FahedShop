@page "/addProduct"
@using ShopLinux.Models
@using ShopLinux.Repositories
@using System.IO
@using BlazorInputFile
@using System
@using System.Text
@using Microsoft.AspNetCore.Hosting


<h3 class="row justify-content-center">AddProduct</h3>
<hr class="mb-2" />
@if (IsSuccessAdded)
{
    <div class="alert alert-success" role="alert">
        success Add @FileName
    </div>
}
<form>
    <div class="form-group row">
        <label for="inputName" class="col-sm-2 col-form-label">Name</label>
        <div class="col-sm-10">
            <input type="text" class="form-control" id="inputName" placeholder="Productname" @bind="@NewProduct.Name">
        </div>
    </div>
    <div class="form-group row">
        <label for="inputDescription" class="col-sm-2 col-form-label">Description</label>
        <div class="col-sm-10">
            <textarea class="form-control" rows="5" id="inputDescription" placeholder="Description" @bind="@NewProduct.Description" />
        </div>
    </div>
    <div class="form-group row">
        <label for="inputName" class="col-sm-2 col-form-label">Price</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="inputName" min="0" @bind="@NewProduct.Price">
        </div>
    </div>
    <div class="form-group row">
        <label for="inputName" class="col-sm-2 col-form-label">Image</label>
        <div class="col-sm-10">
            <BlazorInputFile.InputFile OnChange="HandleFileSelected" class="btn-primary" />
        </div>
    </div>
</form>
<button @onclick="(async()=> await AddNewProduct())" class="btn btn-primary">Save</button>
@code {

    [Inject]
    private ProductRepository ProductRepository { get; set; }
    public string filePath { get; set; } = Path.Combine(Directory.GetCurrentDirectory(), @"wwwroot\Images");
    protected override void OnInitialized()
    {
        NewProduct = new Product();
        IsSuccessAdded = false;
        base.OnInitialized();
    }
    private Product NewProduct { get; set; }
    private bool IsSuccessAdded { get; set; }

    private string FileName { get; set; }

    [Inject]
    private  IWebHostEnvironment _environment { get; set; }

    private async Task AddNewProduct()
    {
        if (string.IsNullOrEmpty(NewProduct.Name)) return;



        //Stream stream = SelectedFile.OpenReadStream();
        //var path = $"{filePath}\\{FileName}";
        //FileStream fs = File.Create(path);
        //await stream.CopyToAsync(fs);
        //stream.Close();
        //fs.Close();

        var name = MyFile.Name;
        var array = name.Split('.');
        var filename = array[0] + ".jpg";
        FileName = filename;
        var ms = new MemoryStream();

        await MyFile.Data.CopyToAsync(ms);
        var path = Path.Combine(_environment.WebRootPath, "Images", FileName);

        using (FileStream file = new FileStream(path, FileMode.Create, FileAccess.Write))
        {
            ms.WriteTo(file);
        }
        NewProduct.Image = FileName;
        NewProduct.Id = Guid.NewGuid();
        ProductRepository.AddProduct(NewProduct);
        NewProduct = new Product();
        IsSuccessAdded = true;

    }

    private IBrowserFile SelectedFile { get; set; }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        SelectedFile = e.GetMultipleFiles().First();

        this.StateHasChanged();
    }

    IFileListEntry MyFile;

    void HandleFileSelected(IFileListEntry[] files)
    {
        MyFile = files.FirstOrDefault();
    }
}
